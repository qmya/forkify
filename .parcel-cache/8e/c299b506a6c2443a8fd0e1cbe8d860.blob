"use strict";

require("core-js/modules/es.typed-array.float32-array.js");

require("core-js/modules/es.typed-array.float64-array.js");

require("core-js/modules/es.typed-array.int8-array.js");

require("core-js/modules/es.typed-array.int16-array.js");

require("core-js/modules/es.typed-array.int32-array.js");

require("core-js/modules/es.typed-array.uint8-array.js");

require("core-js/modules/es.typed-array.uint8-clamped-array.js");

require("core-js/modules/es.typed-array.uint16-array.js");

require("core-js/modules/es.typed-array.uint32-array.js");

require("core-js/modules/es.typed-array.from.js");

require("core-js/modules/es.typed-array.of.js");

require("core-js/modules/web.immediate.js");

require("core-js/modules/web.url.js");

require("core-js/modules/web.url.to-json.js");

require("core-js/modules/web.url-search-params.js");

var model = _interopRequireWildcard(require("./model.js"));

var _recipeView = _interopRequireDefault(require("./views/recipeView.js"));

var _searchView = _interopRequireDefault(require("./views/searchView.js"));

var _resultsView = _interopRequireDefault(require("./views/resultsView.js"));

var _paginationView = _interopRequireDefault(require("./views/paginationView.js"));

var _runtime = require("regenerator-runtime/runtime");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

//* = everything because we have two exports in this file.
//polyfilling async await
//this is not javascript its comming from parcel
if (module.hot) {
  module.hot.accept();
}

const controlRecipe = async function () {
  try {
    //making a dynamic id for the url
    const id = window.location.hash.slice(1);
    if (!id) return; //guard clause

    _recipeView.default.renderSpinner(); // 1) Loading the recipe :


    await model.loadRecipe(id); //async function 👉🏽Here is the model.loadRecipe return anything
    //const recipe = model.state.recipe //We can write this like this too 👇🏽
    //const { recipe } = model.state;
    // 2) Rendering recipe:

    _recipeView.default.render(model.state.recipe); // this render will accept this data (model.state.recipe) & will store it in the object(recipeView)
    //Test
    //controlServing();

  } catch (error) {
    console.error(error);

    _recipeView.default.renderError();
  }
}; //////////////////////////////////////////////////////
//Search


const controlSearchResults = async function () {
  try {
    _resultsView.default.renderSpinner(); //1) Get search Query:


    const query = _searchView.default.getQuery();

    if (!query) return; //2) Load search results:

    await model.loadSearchResult(query); //3) Render the results:

    _resultsView.default.render(model.getSearchResultsPage(1)); //4)Render initial pagination buttons


    _paginationView.default.render(model.state.search);
  } catch (error) {
    console.log(error);
  }
}; //////////////////////////////////////////////////////
//controller for page button


const controlPagination = function (goToPage) {
  console.log(goToPage); //1) Render the NEW results:

  _resultsView.default.render(model.getSearchResultsPage(goToPage)); //2)Render initial pagination buttons


  _paginationView.default.render(model.state.search);
}; //increase and decrease number of serving by clicking the button


const controlServings = function (newServings) {
  console.log('serving '); //update the recipe servings(in state)

  model.updateServings(newServings); //update the recipe view as well

  _recipeView.default.render(model.state.recipe);
}; //////////////////////////////////////////////////////
//adding eventlistner for the search
// window.addEventListener('hashChange', showRecipe);
// window.addEventListener('load', showRecipe);
//we can do the ☝🏽one through DRY method:
// ['hashChange', 'load'].forEach(event => addEventListener(event, controlRecipe));


const init = function () {
  //we will export the function from recipeView and add it here
  _recipeView.default.addHandlerRender(controlRecipe); //serving button


  _recipeView.default.addHandlerUpdateServings(controlServings); //Search


  _searchView.default.addHandlerSearch(controlSearchResults); //page button


  _paginationView.default.addHandlerClick(controlPagination); // controlServing();

};

init();