"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.uploadRecipe = exports.deleteBookmark = exports.addBookmark = exports.persistBookmarks = exports.updateServings = exports.getSearchResultsPage = exports.loadSearchResult = exports.loadRecipe = exports.state = void 0;

var _regeneratorRuntime = require("regenerator-runtime");

var _config = require("./config.js");

var _helpers = require("./helpers.js");

//Here we write all our models
const state = {
  recipe: {},
  search: {
    query: '',
    results: [],
    page: 1,
    //by default
    resultsPerPage: _config.RESULT_PER_PAGE
  },
  bookmarks: []
};
exports.state = state;

const createRecipeObject = function (data) {
  //let create a new recipe object to remove the underscore from the name
  //let recipe = data.data.recipe; //destructure it
  const {
    recipe
  } = data.data;
  return {
    id: recipe.id,
    title: recipe.title,
    publisher: recipe.publisher,
    sourceUrl: recipe.source_url,
    image: recipe.image_url,
    servings: recipe.servings,
    cookingTime: recipe.cooking_time,
    ingredients: recipe.ingredients,
    ...(recipe.key && {
      key: recipe.key
    })
  };
};

const loadRecipe = async function (id) {
  try {
    const data = await (0, _helpers.getJSON)(`${_config.API_URL}${id}`);
    if (state.bookmarks.some(bookmark => bookmark.id === id)) state.recipe.bookmarked = true;else state.recipe.bookmarked = false;
    console.log(state.recipe);
  } catch (error) {
    console.error(`${error} ðŸ§¨`);
    throw error;
  }
}; //////////////////////////////////////////////////////////////////////////////
//for seaching the data
//so here the controller will tell what to search for
//so query is the string the we wanted to search


exports.loadRecipe = loadRecipe;

const loadSearchResult = async function (query) {
  try {
    state.search.query = query;
    const data = await (0, _helpers.getJSON)(`${_config.API_URL}?search=${query}`);
    console.log(data);
    state.search.results = data.data.recipes.map(recipe => {
      return {
        id: recipe.id,
        title: recipe.title,
        publisher: recipe.publisher,
        image: recipe.image_url,
        ...(recipe.key && {
          key: recipe.key
        })
      };
    });
    state.search.page = 1; // new search the page will reset to page 1
  } catch (error) {
    console.error(`${error} ðŸ§¨`);
    throw error;
  }
}; /////////////////////////////////////////////////////////
//paginations


exports.loadSearchResult = loadSearchResult;

const getSearchResultsPage = function (page = state.search.page) {
  //lets save the page so we know that which page we are now and when we go back that previous page is saved inthe state
  state.search.page = page;
  const start = (page - 1) * state.search.resultsPerPage; //0; let page = 1 1-1*10=0

  const end = page * state.search.resultsPerPage; //9;

  return state.search.results.slice(start, end);
}; /////////////////////////////////////////////////////////
//Update the servings


exports.getSearchResultsPage = getSearchResultsPage;

const updateServings = function (newServings) {
  state.recipe.ingredients.forEach(ing => {
    //FORMULA:  newQt = oldQuantity * newServings / oldServings ;
    ing.quantity = ing.quantity * newServings / state.recipe.servings;
  });
  state.recipe.servings = newServings;
}; /////////////////////////////////////////////////////////
//Local store the bookmarks


exports.updateServings = updateServings;

const persistBookmarks = function () {
  localStorage.setItem('bookmarks', JSON.stringify(state.bookmarks));
}; /////////////////////////////////////////////////////////
//BookMark the data


exports.persistBookmarks = persistBookmarks;

const addBookmark = function (recipe) {
  //Add bookmark
  state.bookmarks.push(recipe); //we also want to mark current recipe to be bookmarked

  if (recipe.id === state.recipe.id) state.recipe.bookmarked = true;
  persistBookmarks();
}; /////////////////////////////////////////////////////////
//remove bookmark


exports.addBookmark = addBookmark;

const deleteBookmark = function (id) {
  //delete the bookmark:
  const index = state.bookmarks.findIndex(el => el.id === id);
  state.bookmarks.splice(index, 1); //We want to remove bookmark from that recipe

  if (id === state.recipe.id) state.recipe.bookmarked = false;
  persistBookmarks();
}; /////////////////////////////////////////////////////////


exports.deleteBookmark = deleteBookmark;

const init = function () {
  const storage = localStorage.getItem('bookmarks');
  if (storage) state.bookmarks = JSON.parse(storage);
};

init();
console.log(state.bookmarks); /////////////////////////////////////////////////////////

const clearBookmarks = function () {
  localStorage.clear('bookmarks');
}; ///////////////////////////////////////////////////////////
//upload the recipe to api


const uploadRecipe = async function (newRecipe) {
  //converting newRecipe object into array => Object.entries(newRecipe)
  //filter on the ingredient and remove the emty ingredients
  try {
    const ingredients = Object.entries(newRecipe).filter(entry => entry[0].startsWith('ingredient') && entry[1] !== '').map(ing => {
      const ingArr = ing[1].replaceAll(' ', '').split(','); // replaceAll =>remove white space ( ' ', replace with  empty string '')

      if (ingArr.length !== 3) throw new Error('Wrong ingredient format! Please use the correct format ðŸ˜Š');
      const [quantity, unit, description] = ingArr;
      return {
        quantity: quantity ? +quantity : null,
        unit,
        description
      };
    });
    const recipe = {
      title: newRecipe.title,
      source_url: newRecipe.sourceUrl,
      image_url: newRecipe.image,
      publisher: newRecipe.publisher,
      cooking_time: +newRecipe.cookingTime,
      servings: +newRecipe.servings,
      ingredients
    }; //sendJSON have two perimeter 1 is URL and other is data.

    const data = await (0, _helpers.sendJSON)(`${_config.API_URL}?key=${_config.KEY}`, recipe);
    console.log(data);
  } catch (err) {
    throw err;
  }
};

exports.uploadRecipe = uploadRecipe;